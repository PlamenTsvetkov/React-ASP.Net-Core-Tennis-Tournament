// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TennisTournament.Data;

#nullable disable

namespace TennisTournament.Data.Migrations
{
    [DbContext(typeof(TournamentDbContext))]
    [Migration("20220602211320_addPhotoFileNameToPlayer")]
    partial class addPhotoFileNameToPlayer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TennisTournament.Data.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("SurfaceId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurfaceId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("TennisTournament.Data.Models.LeaguePlayers", b =>
                {
                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("LeagueId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("LeaguesPlayers");
                });

            modelBuilder.Entity("TennisTournament.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PhotoFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TennisTournament.Data.Models.Surface", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Surfaces");
                });

            modelBuilder.Entity("TennisTournament.Data.Models.TournamentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("TournamentTypes");
                });

            modelBuilder.Entity("TennisTournament.Data.Models.League", b =>
                {
                    b.HasOne("TennisTournament.Data.Models.Surface", "Surface")
                        .WithMany("Leagues")
                        .HasForeignKey("SurfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisTournament.Data.Models.TournamentType", "TournamentType")
                        .WithMany("Leagues")
                        .HasForeignKey("TournamentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Surface");

                    b.Navigation("TournamentType");
                });

            modelBuilder.Entity("TennisTournament.Data.Models.LeaguePlayers", b =>
                {
                    b.HasOne("TennisTournament.Data.Models.League", "League")
                        .WithMany("LeaguePlayers")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TennisTournament.Data.Models.Player", "Player")
                        .WithMany("LeaguePlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TennisTournament.Data.Models.League", b =>
                {
                    b.Navigation("LeaguePlayers");
                });

            modelBuilder.Entity("TennisTournament.Data.Models.Player", b =>
                {
                    b.Navigation("LeaguePlayers");
                });

            modelBuilder.Entity("TennisTournament.Data.Models.Surface", b =>
                {
                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("TennisTournament.Data.Models.TournamentType", b =>
                {
                    b.Navigation("Leagues");
                });
#pragma warning restore 612, 618
        }
    }
}
